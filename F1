Гайд по тому, как использовать Git через терминал.

Перед всем этим необходимо подключить устройство к GitHub. Для этого перейдите на в главную папку на Linux или рабочий стол на Windows.(Можете и сами выбрать путь, просто так удобнее.)

При помощи команды mkdir .ssh создайте папку, если ее нет. Далее зайдя в нее при помощи  cd .ssh  пропишите в терминал команду   ssh-keygen -t rsa  . Дайте название файлу, например ssh, после чего нажмите два раза Enter, чтобы оставить пароль пустым. Далее пропишите команду code ssh.pub или code   название файла.pub. Должен открыться VS code, скопируйте ПОЛНОСТЬЮ весь ключь там лежащий и зайдите на сайт GitHub. Откройте Settings - SSH and GPG keys. Там нажмите на зеленную кнопку New SSH key. В строку Title введите любое название, а в блок Key скопированный ключ. Затем нажмите Add SSH key.
 


Первым делом мы открываем терминал и при помощи команды   cd [название папки](скобки не нужны везде, где они есть)  переходим в нужную нам дерикторию. (Полезной командой является ls, чтобы не запутаться, она выводит все элементы в папке.)

Далее в нужной директории используем команду   git clone [ssh ключ репозитория, который можно взять на сайте GitHub]  .

Создастся папка с названием вашего репозитория. Переходим в нее и прописываем   git init  , тем самым создавая ЛОКАЛЬНЫЙ репозиторий в папке.

Далее при помощи команды   git add [название файла или папки(если файл, то важно указать расширение)]   индексируем файл.(Как Я понял мы выделяем его из всех файлов, чтобы залить его.)

После чего при помощи команды   git commit -m(данная штука обязательна) "любой комментарий"   добавляем обязательный комментарий.

Далее, если у вас пустой репозиторий, что можно понять по отсутствию любых файлов на сайте GitHub, при помощи команды   git branch -M [название ветки]   создаем главную ветку, в которую загрузится файл, который мы проиндексировали при помощи git add.

Затем мы при помощи команды   git remote add [любое название](обычно используется название origin) [ssh-ключ]   подключаемся к репозиторию. Проверить подключение можно при помощи команды git remote, где должно появится название origin или ваше название. А также при помощи команды git remote -v, где должен появиться репозиторий вместе с ссылками на него. (!DANGER! Ссылка должна быть SSH ключем, если она начинается с htts/.., то вы не сможете загрузить файлы)

Для того, чтобы изменить ссылку на репозиторий можно использовать команду git remote set-url [название репозитория] [новый ssh-ключ]. Проверьте изменения также при помощи git remote -v    .


Если вы смогли подключить правильно репозиторий, то пропишите команду git push -u [название репозитория, указанное в git remote] [название главной ветки, которое вы указали в git branch]

После этого должна произойти загрузка и ваш файл должен появиться на сайте, обновите страницу.


Последовательность команд при первом создании репозитория должна выглядет примерно так: 

git init
git add name.js                                (Если вы хотите выбрать все файлы в папке, то пропишите команду git add -A)
git commit -m "commit"
git branch -M main
git remote add origin git@github.com:UotanKlein/Test.git
git push -u origin main




Если все получилось, можно переходить к взаимодействию с ветками. Ветки находятся на странице репозитория, немного выше от файлов, в строке branches.

Чтобы создать ветку нужно использовать команду git branch [название ветки]

Чтобы ВОЙТИ в созданную ветку используйте команду git checkout [название ветки]

Чтобы посмотреть существующие ветки используйте команду git branch -a

Чтобы удалить ветку используйте команду git branch -D [название ветки]

ВАЖНО!!!!! После каждого залива файлов в ветку(после пуша), при помощи команды git checkout main(название главной ветки) переходите в главную ветку, чтобы очистить индексированные файлы. (DANGER!! После перехода в главную ветку, файл, который был залит, будет удален, поэтому сохраните его по крайне мере в двух экземплярах.)

Далее создайте новую ветку, перейдите в нее и повторите процесс.



Последовательность команд при взаимодействии с ветками выглядит так:

git branch task1
git checkout task1
git add task1.js
git commit -m "Add completed task 1"
git push -u origin task1
git checkout main



Если вы хотите удалить файл с GitHub, перейдите в нужную ветку, пропишите команду git rm [название файла]   сделайте commit, после чего git push


Последовательность команд при удалении файла или папки выглядит так:

git checkout task1
git rm task1.js
git commit -m "Delete task 1"
git push -u origin task1
git checkout main




Если у вас возникла ошибка, что файл не найдет или у вас нет к репозиторию доступа, но проверьте ssh ключ и правильность указанного названия в git add.



Список команд:

ssh-keygen -t rsa   - создает SSH ключ, который нужно ввести в настройках GitHub.
получить ключ  cat .ssh/id_rsa.pub
git clone [ssh-ключ] - клонировать репозиторий и создать папку с ее названием.
git init - создать ЛОКАЛЬНЫЙ репозиторий
git add [название файла] - проиндексировать/выделить файл или папку.
git commit -m "любой текст"  - добавить обязательный комментарий при пуше/загрузке/удалении файла/ветки.
git branch [название ветки] - создать ветку.
git branch -D [название ветки] - удалить ветку.
git branch -a   - посмотреть все существующие ветки.
git checkout [название ветки] - войти в веткую
git remote - посмотреть список подключенных репозиториев.
git remote -v    - посмотреть ссылки, подключенные к репозиториям.
git remote add [дать название] [ssh-ключ] - подключить репозиторий.
git remote set-url [название репозитория] [ssh-ключ]  - изменить ссылку на репозиторий.
git rm [название файла]  - перестать индексировать файл/удалить его.
git push -u [название репозитория в git remote] [название ветки]    - отправляет/запушивает файлы в GitHub/репозиторий на сайте.
git status - посмотреть удаленные, непроиндексированные, индексированные файлы, статус коммитов и т.п.
git log - посмотреть логи.



Сам не понял, поэтому вот ссылка с примерным описанием, что такое git fetch 

https://selectel.ru/blog/tutorials/git-fetch-command-how-is-it-different-from-git-pull/

что делаем с самого начала:

ssh-keygen -t rsa   - создает SSH ключ, который нужно ввести в настройках GitHub.
получить ключ  cat .ssh/id_rsa.pub
вставляем ssh в гит 
дальше отправят ссылку синхронизироваться с гитом 
никак не менять файлы кроме джс
клонируем репрезиторий через ssh
git clonr "ssh сылка"
команда ls где все файлы перейти в файл названия гита
cd имя свое 
instal
make test - проверка всего теста   
make lint - проверка линтера    
make lint-fix - автоматическое исправление линтера
make instal
code index.js
==создать 5 пустышек 
=function
или через const
экспорт функции export{названия через запятую}
не забыть про ctrl s 
make lint 
make lint-fix
make test 
return 
git add -A
git commit -m ""
git push -u origin "название"

--что нам дано? какие свойсва?
--что от меня хотят?
--как мне это сделать?
через мозилу можно все найти для джс 


//n школьников и k яблок сколько достанется каждому школьнику?
--10 22
const appels = (n,k) =>{
  const result = math.floor(k/n);
return result;
}
concole.log(10,22);//


//дано 3 числа надо найти минимальное
const min =(a,b,s) => {
 const result=Math.min(a,b,s);
  return result;
}//

// дано число функция должна найти сумму цифр этого числа 12345
const sunof =(a) => {
 const res = 0;

res=res + a %10;
a = Math.floor(a/10);
}
return res;
};

12345= 5 + 4 * 10 + 3 * 10 *10 
123245 % 10 =5 
1234/10=4
12344/10=123
123%10+3
12%10=2
12/10=1
1%10=1
1/10=0
}




function getSum(a, b) {
  return a + b;
}
// console.log(getSum(2,34));
function getSmallestNumber(a, b) {
  return Math.min(a, b);
}
// console.log(getSmallestNumber(23, 1));
function castBoolean(value) {
  return Boolean(value);
}
// console.log(castBoolean('true'));
function capitalize(str, num) {
  if (num < 0 || num >= str.length) {
    return str;
  }

  const capitalized = str.charAt(num).toUpperCase();
  const result = str.slice(0, num) + capitalized + str.slice(num + 1);

  return result;
}

console.log(capitalize('Hexlet', 2));
function countCapitalLetters(str) {
    let count = 0;
    for (let i = 0; i < str.length; i += 1) {
      if (str[i] >= 'A' && str[i] <= 'Z') {
        count += 1;
      }
    }
  
    return count;
  }
  console.log(countCapitalLetters('HeXlet'));

export {
  getSum, getSmallestNumber, castBoolean, capitalize, countCapitalLetters,
};

Составьте понятное вам определение исходя из аналогии:
 GitHub:
   - Объяснение: GitHub - это платформа хостинга, хранения и совместной разработке. Здесь разработчики могут хранить свои проекты, работать над ними в команде, самостоятельно, параллельно и отслеживать изменения, обновления.
   - Аналогия: GitHub, как облачное хранилище проектов, подобен социальной сети для разработчиков, где они вместе строят и совершенствуют свои творения.
SSH-ключ:
   - Объяснение: SSH-ключ - это способ безопасной аутентификации (подключение) на удаленном (облачном) сервере. Он используется для подключения к GitHub, например, без постоянного ввода пароля.
   - Аналогия: SSH-ключ, как сканер отпечатка пальца, позволяет вам разблокировать устройство (подключаться к серверу) без необходимости запоминать пароль.
Репозиторий:
   - Объяснение: Репозиторий - это место, где хранится код проекта, вместе со всей его историей изменений.
   - Аналогия: Репозиторий, как папка с проектом, подобен архиву, где хранятся все чертежи, планы и изменения к вашему главному творению.
Коммит:
   - Объяснение: Коммит - это сохранение изменений в коде проекта. Он создает точку в истории, которую можно сохранить и вернуться к ней.
   - Аналогия: Коммит, как сохранение в игре, фиксирует текущее состояние, чтобы в случае чего можно было вернуться к нему.
Ветка:
   - Объяснение: Ветка - это отдельная линия разработки, которая может быть создана для работы над новой версией (функцией) или исправлением, не затрагивая основной код проекта.
   - Аналогия: Ветка, как отдельный поток в разговоре, позволяет вам обсуждать и вносить изменения, не прерывая основной диалог.



Заполните пропуски в инструкциях:
1. Как сгенерировать SSH-ключ и добавить к себе на GitHub:
Шаги:
Откройте терминал и выполните ssh-keygen -t rsa -b 4096
Нажмите Enter, чтобы принять стандартное расположение файла.
Введите пароль или нажмите Enter, чтобы оставить его пустым.
Выполните cat ./.ssh/id_rsa.pub, чтобы скопировать (ПКМ) открытый ключ.
Перейдите в настройки GitHub -> SSH and GPG keys -> New SSH key -> вставьте ключ.
2. Как добавить к себе чей-то репозиторий:
Шаги:
Скопируйте URL репозитория с GitHub (зеленая кнопка Code).
В терминале выполните git clone <URL репозитория>.
3. Как добавить на свой GitHub склонированный репозиторий:
Шаги:
Создайте пустой репозиторий на GitHub.
Скопируйте его SSH-ссылку.
Войдите в директорию склонированного репозитория в терминале (например, вы склонировали репозиторий Николая).
Выполните git remote set-url origin <SSH-link>.
Выполните git push.
4. Как сохранить изменения на GitHub (сделать коммит):
Шаги:
Выполните git add -A/ git add - -all, чтобы добавить все изменения.
Выполните git commit -m "Описание коммита".
Выполните git push, чтобы отправить изменения на GitHub.
5. Как работать со своим репозиторием с другого устройства:
Шаги:
Склонируйте свой репозиторий с GitHub на другое устройство: git clone <URL вашего репозитория>.
Вносите изменения, коммитите и отправляйте их обратно на GitHub.
6. Как открыть VSCode из терминала Linux:
Шаги:
* VSCode - cmd+Shift+P - “shell” - для Mac
В терминале выполните code <имя-файла(папки)>. для открытия текущего каталога в VSCode.
7. Как запустить программу в терминале (через Node.js):
Шаги:
Введите node имя_файла.js, чтобы выполнить программу Node.js в терминале.
8. Как создать ветку:
Шаги:
Выполните git branch <новая_ветка>, чтобы создать новую ветку.
Выполните git checkout <новая_ветка>, чтобы переключиться на новую ветку.
*Или используйте git checkout -b <новая_ветка> для создания и переключения на новую ветку сразу.
 
Часто задаваемые вопросы:
В каком случае нужно генерировать новый SSH-ключ:
Когда вы впервые начинаете работу с GitHub.
При использовании нового компьютера или сервера для работы с репозиториями.
Когда старый ключ утерян или скомпрометирован.
1.1 Могу ли я использовать один и тот же SSH ключ на разных устройствах:
Да, вы можете использовать один и тот же SSH ключ на разных устройствах. Это удобно при работе с несколькими устройствами.
В каких случаях надо использовать git config user.name (user.email) <аргументы>:
При первой настройке Git на новом устройстве.
При изменении вашего имени или электронной почты.
Когда вам нужно использовать разные имена или адреса электронной почты для разных проектов.
В каком случае нужно создавать ветку и для чего она нужна:
Новая функциональность: создайте ветку для работы над новой функцией, чтобы не затрагивать основной код.
Исправление ошибок: создайте ветку для исправления ошибок, чтобы избежать конфликтов с основной разработкой.
Разработка параллельных версий: создайте ветку для разработки и тестирования новых идей без влияния на стабильный код.
Что писать в комментарии для git commit:
Краткое, но информативное описание изменений, чтобы понять суть коммита.
Укажите, какие задачи решает этот коммит.
Следуйте принципу "Как" и "Почему" для более полного объяснения.
Что такое Pull Request и зачем он нужен:
Pull Request (или Merge Request) - это запрос на внесение изменений из вашей ветки в основную ветку проекта.
Используется для обсуждения и рецензии ваших изменений перед их объединением с основным кодом.
Позволяет совершать изменения согласованно и избегать конфликтов при слиянии кода.
